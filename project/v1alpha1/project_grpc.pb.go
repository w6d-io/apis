// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectExternalClient is the client API for ProjectExternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectExternalClient interface {
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error)
	LinkProject(ctx context.Context, in *LinkProjectRequest, opts ...grpc.CallOption) (*LinkProjectResponse, error)
	UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
}

type projectExternalClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectExternalClient(cc grpc.ClientConnInterface) ProjectExternalClient {
	return &projectExternalClient{cc}
}

func (c *projectExternalClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/ProjectExternal/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectExternalClient) GetProjects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := c.cc.Invoke(ctx, "/ProjectExternal/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectExternalClient) LinkProject(ctx context.Context, in *LinkProjectRequest, opts ...grpc.CallOption) (*LinkProjectResponse, error) {
	out := new(LinkProjectResponse)
	err := c.cc.Invoke(ctx, "/ProjectExternal/LinkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectExternalClient) UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/ProjectExternal/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectExternalServer is the server API for ProjectExternal service.
// All implementations must embed UnimplementedProjectExternalServer
// for forward compatibility
type ProjectExternalServer interface {
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	GetProjects(context.Context, *ProjectsRequest) (*ProjectsResponse, error)
	LinkProject(context.Context, *LinkProjectRequest) (*LinkProjectResponse, error)
	UpdateProject(context.Context, *Project) (*UpdateProjectResponse, error)
	mustEmbedUnimplementedProjectExternalServer()
}

// UnimplementedProjectExternalServer must be embedded to have forward compatible implementations.
type UnimplementedProjectExternalServer struct {
}

func (UnimplementedProjectExternalServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectExternalServer) GetProjects(context.Context, *ProjectsRequest) (*ProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectExternalServer) LinkProject(context.Context, *LinkProjectRequest) (*LinkProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkProject not implemented")
}
func (UnimplementedProjectExternalServer) UpdateProject(context.Context, *Project) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectExternalServer) mustEmbedUnimplementedProjectExternalServer() {}

// UnsafeProjectExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectExternalServer will
// result in compilation errors.
type UnsafeProjectExternalServer interface {
	mustEmbedUnimplementedProjectExternalServer()
}

func RegisterProjectExternalServer(s grpc.ServiceRegistrar, srv ProjectExternalServer) {
	s.RegisterService(&ProjectExternal_ServiceDesc, srv)
}

func _ProjectExternal_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectExternalServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProjectExternal/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectExternalServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectExternal_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectExternalServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProjectExternal/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectExternalServer).GetProjects(ctx, req.(*ProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectExternal_LinkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectExternalServer).LinkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProjectExternal/LinkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectExternalServer).LinkProject(ctx, req.(*LinkProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectExternal_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectExternalServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProjectExternal/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectExternalServer).UpdateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectExternal_ServiceDesc is the grpc.ServiceDesc for ProjectExternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectExternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProjectExternal",
	HandlerType: (*ProjectExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ProjectExternal_GetProject_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _ProjectExternal_GetProjects_Handler,
		},
		{
			MethodName: "LinkProject",
			Handler:    _ProjectExternal_LinkProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectExternal_UpdateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}
